Here is anything you need to know about project's functionality, 
that differs from the original OpNovice project (it was based on it. Original README part is below).

The detector is a GAGG scintillator with size of 14 x 14 x 7 mm. It is striked with a gamma particle.
It's velocity is perpendicular to the "front surface" of scintillator - 14 x 14 mm closest surface.
We call "bottom" a surface, opposing the front, and 'sides' - other four sufraces.

It has four 'photomultipliers' - 
four smaller volumes (approximately 6x6 mm) attached to the bottom side.
 You can see them in visualisation.
Photomultipliers are fillet with air, there is no reflection on their surface, only absorbtion.
Absorbtion is 70% (to simulate typical efficiency). Every photon, that was not absorbed 
at the surface of detector, is added to output binary file. Yoy can learn it's structure
from any python script, reading the data.

Also, you can see five big volumes, attached to the front and side surfaces.
It was made for getting access to these surfaces in GEANT4. These five
volumes are filled with air and they are not a part of detector, they are just
a way to control reflection value of each surface differently. 

There are also thin gaps on the bottom, that are not covered with photomultipliers,
because bottom is 14 x 14 mm , and photomultipliers are ~6x6 mm, so they do not
cover the bottom entirely. I call these gaps 'lines', and make this surface almost
black, means small reflection value.

The main script in energy_hist.py
It takes PATH to the data, produced by GEANT4 simulation and produces diffetent
pictures: energy histogram for photons, collected in photomultipliers, coordinate
reconstruction, etc.

You can run the project with a few custom arguements:

./OpNovice -x *integer from -7 to 7* -y *integer from -7 to 7* 
Sets up the coordinate of scintillator, which will be striked by the gamma particle.
Both are zeros by default.

./OpNovice -side *integer from 0 to 100* -roof *integer from 0 to 100*
Sets up frontal (the closest to the gamma particle) surface reflection value in %
and side surfaces (parallel to the gamma velocity direction) reflection value in %
So "-side 95" means 5% absorbtion and 95% reflection from side surfaces.

./OpNovice -m optPhoton.mac 
Sets up the number of simulation runs you need, turns off the visualisation.



-------------------------------------------------------------------

     =========================================================
     Geant4 - an Object-Oriented Toolkit for Simulation in HEP
     =========================================================

                            OpNovice
                            --------

This example presently illustrates the following basic concepts, and in
particular (indicated with ***), how to use G4 for optical photon
generation and transport. Other extended example of what is possible
in Geant4 with optical photons can be found at
examples/extended/optical/LXe and wls.

main()
------

 ==> define Random Number Engine and initial seed

G4Optical Physics
-----------------

 ==> define particles; including *** G4OpticalPhoton     ***
     define processes; including *** G4Cerenkov          ***
                                 *** G4Scintillation     ***
                                 *** G4OpAbsorption      ***
                                 *** G4OpRayleigh        ***
                                 *** G4OpBoundaryProcess ***

 ==> A messenger command allows to define interactively the 
     verbose level and the maximum number of Cerenkov photons per step
     (see for instance OpNovice.in)

G4VUserDetectorConstruction
---------------------------

 ==> define material: Air and Water
     define simple G4box geometry
     *** add G4MaterialPropertiesTable to G4Material       ***
     *** define G4LogicalSurface(s)                        ***
     *** define G4OpticalSurface                           ***
     *** add G4MaterialPropertiesTable to G4OpticalSurface ***

G4VUserPrimaryGeneratorAction
-----------------------------

 ==> Use G4ParticleGun to shoot a charge particle into a Cerenkov radiator
 
 ==> A messenger command allows to define interactively the polarization of an
     primary optical photon (see for instance optPhoton.mac)
 
G4UserRunAction
---------------

==> define G4Timer (start/stop)
    set verbose levels

G4UserStackingAction
--------------------

==> show how to count the number of secondary particles in an event

Visualisation
-------------
 
 The Visualization Manager is set in the main().
 The initialisation of the drawing is done via a set of /vis/ commands
 in the macro vis.mac. This macro is automatically read from
 the main in case of interactive running mode.
 
 The detector has a default view which is a longitudinal view of the tank.
 The tracks are drawn at the end of event, and erased at the end of run.
 
 HOW TO START
 ------------
 
 - compile and link to generate an executable

   This example handles the program arguments in a new way.
   It can be run with the following optional arguments:
   % OpNovice [-m macro ] [-u UIsession] [-t nThreads]

   The -t option is available only in multi-threading mode
   and it allows the user to override the Geant4 default number of
   threads. The number of threads can be also set via G4FORCENUMBEROFTHREADS
   environment variable which has the top priority.

 - execute OpNovice in 'batch' mode from macro files
 	% OpNovice -m OpNovice.in
 
 - execute OpNovice in 'interactive mode' with visualization
 	% OpNovice
 	....
 	Idle> type your commands. For instance:
 	Idle> /control/execute optPhoton.mac
 	....
 	Idle> exit
 
